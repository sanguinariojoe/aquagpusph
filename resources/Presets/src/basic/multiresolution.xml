<?xml version="1.0" ?>

<!-- Particles refinement and de-refinement.

This module depends on basic/domain.xml module, which should be included as
well. This module should be included once.

In order to modify the number of iterations to transfer the mass between partner
and children, redefine M_ITERS.

To use this module you should:
1.- Include this module file
2.- Modify your particles set definitions to read the field m0 instead of m
3.- Add initial values for miter (usually equal to M_ITERS) and ilevel
4.- Add the distance between particles at 0 level refinement, dr_level0, to each
    particles set.
5.- Load a module from basic/multiresolution folder to set the refinement areas
You can also redefine the variable M_ITERS to modify the number of time steps
required to transfer the mas from partner particles to children ones.

Boundary elements/particles are not never split or coalesced. This module may
affects the inlet boundary condition, so include this file after inlet.xml

You can find an usage example in examples/2D/cylinder_inside_channel
-->

<sphInput>
    <Variables>
        <!-- Base distance between particles for each set -->
        <Variable name="dr_level0" type="float*" length="n_sets" />
        <!-- Original mass of each particle -->
        <Variable name="m0" type="float*" length="N" />
        <Variable name="m0_in" type="float*" length="N" />
        <!-- Mass transfer iteration -->
        <Variable name="miter" type="int*" length="N" />        
        <Variable name="miter_in" type="int*" length="N" />        
        <!-- The refinement level each particle belongs, and the refinement
        level specified by the area -->
        <Variable name="ilevel" type="unsigned int*" length="N" />
        <Variable name="ilevel_in" type="unsigned int*" length="N" />
        <Variable name="level" type="unsigned int*" length="N" />
        <Variable name="level_in" type="unsigned int*" length="N" />
        <!-- Internal variables to mark the particles to become split/coalesced
        -->
        <Variable name="isplit" type="unsigned int*" length="N" />
        <Variable name="isplit_in" type="unsigned int*" length="N" />
        <Variable name="split_perm" type="size_t*" length="N" />
        <Variable name="split_invperm" type="size_t*" length="N" />
        <Variable name="split_cell" type="ssvec*" length="N" />
        <Variable name="split_dist" type="float*" length="N" />
        <!-- Since each particle may contribute to several partner particles
        while coalescing, we should weight such contribution -->
        <Variable name="split_weight" type="float*" length="N" />
        <!-- Internal variables to mark the buffer particles to become partner
        -->
        <Variable name="mybuffer" type="unsigned int*" length="N" />
        <!-- Internal variable to check there are enough buffer particles -->
        <Variable name="required_nbuffer" type="size_t" />        
    </Variables>

    <Tools>
        <!-- Patch to the inlet to avoid become affected by this module -->
        <Tool name="cfd inlet feed" action="try_replace" type="kernel" entry_point="feed" path="../../Scripts/basic/multiresolution/Inlet.cl"/>

        <!-- Sort the intensive variables -->
        <Tool name="Backup m0" action="insert" before="Sort" type="copy" in="m0" out="m0_in"/>
        <Tool name="Backup miter" action="insert" before="Sort" type="copy" in="miter" out="miter_in"/>
        <Tool name="Backup ilevel" action="insert" before="Sort" type="copy" in="ilevel" out="ilevel_in"/>
        <Tool name="Backup level" action="insert" before="Sort" type="copy" in="level" out="level_in"/>
        <Tool name="basic multiresolution sort" action="insert" before="Sort" type="kernel" path="../../Scripts/basic/multiresolution/Sort.cl"/>

        <!--    Refinement level
             ======================
        In order to determine whether a particle should become split, coalesced
        or even preserved, we must known the refinement level required. Such
        operation is relegated to the user. However, herein we are adding a
        dummy tool to signaling him where it should done. Also we are
        restarting the level to the default one, 0 -->
        <Tool name="Refinement level" action="insert" after="Predictor" type="dummy"/>
        <Tool name="basic init level" action="insert" before="Refinement level" type="set" in="level" value="0"/>

        <!--    Mass transfer
             ===================
        When a partner particle is split/coalesced in one or more children
        particles, it is not instantaneously removed. Instead, its mass is
        progressively transfered. The user may control the number of time steps
        before the mass is completely transfered from partners to children
        defining the variable M_ITERS (10 by default). When a partner particle
        lost all its mass, it is removed (i.e. sent to the buffer) -->
        <Tool name="Refinement mass" action="insert" after="Refinement level" type="kernel" entry_point="set_mass" path="../../Scripts/basic/multiresolution/SetMass.cl"/>

        <!--    Particles split
             =====================
        When a particle is marked with a refinement level bigger than its level,
        then such particle should be split, such that it turns into a partner
        particle, and 4/8 children particles are generated and associated to
        him. This process is a bit complex:
        1.- Each particle is analyzed to checkif it is already
        spliting/coalescing. If that's the case, the particle is ignored.
        2.- The remaining particles are checked looking for the ones which
        its refinement level is lower to the target one, and mark them to become
        split
        3.- The list of particles to become split is sorted as
        "non-split"/"split"/"out of bounds".
        4.- Then the new children particles are generated
        -->
        <Tool name="Refinement split" action="insert" after="Corrector" type="dummy"/>
        <Tool name="Set buffer" action="insert" before="Refinement split" type="dummy" />
        <Tool name="basic init isplit" action="insert" before="Refinement split" type="set" in="isplit" value="2"/>
        <Tool name="basic isplit" action="insert" before="Refinement split" type="kernel" entry_point="check_split" path="../../Scripts/basic/multiresolution/Split.cl"/>
        <!-- We must check we have enough buffer particles -->
        <Tool name="basic init isplit_in" action="insert" before="Refinement split" type="set" in="isplit_in" value="0"/>
        <Tool name="basic isplit_in" action="insert" before="Refinement split" type="kernel" entry_point="set_isplit_in" path="../../Scripts/basic/multiresolution/Split.cl"/>
        <Tool name="basic count buffer particles" action="insert" before="Refinement split" type="reduction" in="isplit_in" out="required_nbuffer" null="0">
            c = a + b;
        </Tool>
        <Tool name="basic check buffer particles" action="insert" before="Refinement split" type="assert" condition="nbuffer >= required_nbuffer"/>
        <!-- Now we can safely consume buffer particles -->
        <Tool name="basic sort isplit" action="insert" before="Refinement split" type="radix-sort" in="isplit" perm="split_perm" inv_perm="split_invperm"/>
        <Tool name="basic split" action="insert" before="Refinement split" type="kernel" entry_point="generate" path="../../Scripts/basic/multiresolution/Split.cl"/>

        <!--    Particles coalesce
             ========================
        When a particle has a refinement level target lower than its current
        level, it should become coalesced with other similar particles. Due to
        the nature of the method, that's a quite complex operation, which is
        solved as follows:
        1.- Seeds detection. The seeds are the particle which will represent
        each group of coalescing particles.
            1.a.- All the candidate particles to become coalesced are signaled,
            and placed in a regular grid of dr/2^level
            1.b.- Just one particle of each cell is kept (the most centered one)
        2.- Coalescing candidates. All the neighbour particles of the seeds,
        which has the same refinement level and are close enough to a seed, will
        be marked as coalescing
        3.- Each coalescing particles will look for the closest seed, and associate with
        that.
        4.- Finally a new partner particle is generated on top of the coalescing
        particles data.
        -->
        <Tool name="Refinement coalesce" action="insert" after="Refinement split" type="dummy"/>
        <Tool name="Set buffer" action="insert" before="Refinement coalesce" type="dummy" />
        <Tool name="basic init icoalesce" action="insert" before="Refinement coalesce" type="set" in="isplit" value="3"/>
        <Tool name="basic init mybuffer" action="insert" before="Refinement coalesce" type="set" in="mybuffer" value="N"/>
        <Tool name="basic init coalesce_weight" action="insert" before="Refinement coalesce" type="set" in="split_weight" value="1.0"/>
        <!-- Look for the seeds -->
        <Tool name="basic coalesce seed candidates" action="insert" before="Refinement coalesce" type="kernel" entry_point="seed_candidates" path="../../Scripts/basic/multiresolution/Coalesce.cl"/>
        <Tool name="basic backup icoalesce" action="insert" before="Refinement coalesce" type="copy" in="isplit" out="isplit_in"/>
        <Tool name="basic coalesce seeds" action="insert" before="Refinement coalesce" type="kernel" entry_point="seeds" path="../../Scripts/basic/multiresolution/Coalesce.cl"/>
        <!-- We must check we have enough buffer particles -->
        <Tool name="basic init icoalesce_in" action="insert" before="Refinement coalesce" type="set" in="isplit_in" value="0"/>
        <Tool name="basic icoalesce_in" action="insert" before="Refinement coalesce" type="kernel" entry_point="set_isplit_in" path="../../Scripts/basic/multiresolution/Coalesce.cl"/>
        <Tool name="basic count buffer particles" action="insert" before="Refinement coalesce" type="reduction" in="isplit_in" out="required_nbuffer" null="0">
            c = a + b;
        </Tool>
        <Tool name="basic check buffer particles" action="insert" before="Refinement coalesce" type="assert" condition="nbuffer >= required_nbuffer"/>
        <!-- Look for childrens, and compute its contribution weight depending
        on the number of seeds close enough -->
        <Tool name="basic coalesce children" action="insert" before="Refinement coalesce" type="kernel" entry_point="children" path="../../Scripts/basic/multiresolution/Coalesce.cl"/>
        <Tool name="basic coalesce weights" action="insert" before="Refinement coalesce" type="kernel" entry_point="weights" path="../../Scripts/basic/multiresolution/Coalesce.cl"/>
        <!-- Generate the new particles (consuming buffer ones), and compute
        their field values -->
        <Tool name="basic backup icoalesce" action="insert" before="Refinement coalesce" type="copy" in="isplit" out="isplit_in"/>
        <Tool name="basic sort icoalesce" action="insert" before="Refinement coalesce" type="radix-sort" in="isplit" perm="split_perm" inv_perm="split_invperm"/>
        <Tool name="basic coalesce generate" action="insert" before="Refinement coalesce" type="kernel" entry_point="generate" path="../../Scripts/basic/multiresolution/Coalesce.cl"/>
        <Tool name="basic restore icoalesce" action="insert" before="Refinement coalesce" type="copy" in="isplit_in" out="isplit"/>
        <Tool name="basic coalesce fields" action="insert" before="Refinement coalesce" type="kernel" entry_point="fields" path="../../Scripts/basic/multiresolution/Coalesce.cl"/>

        <!--    Outdated partners removal
             ===============================
        As commented above, when a partner particle lost all its mass (which
        has been transfered to the children), it is converted into a buffer
        particle -->
        <Tool name="Refinement removal" action="insert" before="Domain" type="kernel" path="../../Scripts/basic/multiresolution/Remove.cl"/>

    </Tools>

    <Include file="setBuffer.xml" when="end"/>
</sphInput>
