<?xml version="1.0" ?>

<!-- motion.xml
Generic motion controlled by a Python script. The rotation is defined by the
Euler-XYZ angles
This preset is designed to be loaded after cfd.xml.

To use it, just include this file, and later set the initial values for the
variables:
motion_iset = The particles set affected (0 by default)
motion_r = Position of the center of rotation
motion_drdt = Linear velocity towards x, y, z
motion_ddrddt = Linear acceleration towards x, y, z
motion_a = Rotation angles phi, theta, psi
motion_dadt = angular velocities dphidt, dthetadt, dpsidt
motion_ddaddt = angular velocities dphidt, dthetadt, dpsidt

You should provide a Motion.py script in your execution path, where such
variables should be set each time step (If boundary integrals are used,
the accelerations can be ignored).

You can also include this preset several times to impose motions to several
bodies (with the same script Motion.py, or with different ones). For instance:

<Include file="motion.xml" prefix="iset0_"/>
<Include file="motion.xml" prefix="iset2_"/>
<Tools>
    <Tool action="replace" type="python" name="iset0_MotionData" path="MotionFirstBody.py"/>
    <Tool action="insert" before="iset0_MotionData" type="set_scalar" name="motion_iset0" in="motion_iset" value="0"/>
    <Tool action="replace" type="python" name="iset2_MotionData" path="MotionSecondBody.py"/>
    <Tool action="insert" before="iset2_MotionData" type="set_scalar" name="motion_iset2" in="motion_iset" value="2"/>
</Tools>

The behaviour if this motion preset is imposed twice on the same object is
undefined.
-->

<sphInput>
    <Variables>
        <!-- Particles set affected -->
        <Variable name="motion_iset" type="unsigned int" value="0" />
        <!-- position, velocity and acceleration -->
        <Variable name="motion_r" type="vec" value="0.0, 0.0, 0.0, 0.0" />
        <Variable name="motion_drdt" type="vec" value="0.0, 0.0, 0.0, 0.0" />
        <Variable name="motion_ddrddt" type="vec" value="0.0, 0.0, 0.0, 0.0" />
        <!-- rotation, angular velocity and angular acceleration -->
        <Variable name="motion_a" type="vec4" value="0.0, 0.0, 0.0, 0.0" />
        <Variable name="motion_dadt" type="vec4" value="0.0, 0.0, 0.0, 0.0" />
        <Variable name="motion_ddaddt" type="vec4" value="0.0, 0.0, 0.0, 0.0" />
        <!-- Backup variables to can unstransform previous transformations -->
        <Variable name="motion_r_in" type="vec" value="0.0, 0.0, 0.0, 0.0" />
        <Variable name="motion_a_in" type="vec4" value="0.0, 0.0, 0.0, 0.0" />
    </Variables>

    <Tools>
        <!-- We should start calling a generic Python script, which should be
        defined, in order to set the motion parameters for the current time
        step -->
        <Tool action="insert" after="TimeStep" type="python" name="cfd motion data" path="Motion.py"/>
        <!-- In case several motions are required, they are all trying to use
        the same variables motion_r, motion_a. Therefore, in order to can revert
        the transformation and set the new one, we must save the motion state
        and restore the previous one. -->
        <Tool action="insert" after_prefix="cfd motion data" type="python" name="cfd motion state" path="../../Scripts/cfd/Motions/State.py"/>
        <!-- We must start recovering the initial position of the particles
        undoing the previous time step transformation. -->
        <Tool action="insert" after_prefix="cfd motion state" type="kernel" name="cfd motion unTransform" path="../../Scripts/cfd/Motions/UnTransform.cl"/>
        <!-- Such that we can apply the new transformation -->
        <Tool action="insert" after_prefix="cfd motion unTransform" type="kernel" name="cfd motion velocity" path="../../Scripts/cfd/Motions/Velocity.cl"/>
        <Tool action="insert" after_prefix="cfd motion velocity" type="kernel" name="cfd motion acceleration" path="../../Scripts/cfd/Motions/Acceleration.cl"/>
        <Tool action="insert" after_prefix="cfd motion acceleration" type="kernel" name="cfd motion transform" path="../../Scripts/cfd/Motions/Transform.cl"/>
    </Tools>
</sphInput>
